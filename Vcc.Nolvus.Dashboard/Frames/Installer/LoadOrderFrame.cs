using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using Syncfusion.WinForms.Controls;
using Syncfusion.Windows.Forms;
using Syncfusion.Windows.Forms.Tools;
using Syncfusion.WinForms.ListView.Enums;
using Vcc.Nolvus.Core.Interfaces;
using Vcc.Nolvus.Core.Frames;
using Vcc.Nolvus.Core.Enums;
using Vcc.Nolvus.Core.Events;
using Vcc.Nolvus.Core.Services;
using Vcc.Nolvus.Api.Installer.Services;
using Vcc.Nolvus.Api.Installer;
using Vcc.Nolvus.Dashboard.Frames.Instance;

namespace Vcc.Nolvus.Dashboard.Frames.Installer
{
    public partial class LoadOrderFrame : DashboardFrame
    {        
        public LoadOrderFrame()
        {
            InitializeComponent();
        }
        public LoadOrderFrame(IDashboard Dashboard, FrameParameters Params) 
            : base(Dashboard, Params)            
        {
            InitializeComponent();            
        }
        public async Task ApplyInstallOrder()
        {
            ServiceSingleton.Dashboard.Status("Applying Install order...");

            var Tsk = Task.Run(() =>
            {
                try
                {
                    var Instance = ServiceSingleton.Instances.WorkingInstance;
                    var InstallList = ServiceSingleton.Packages.InstallList;
                    var Lines = ServiceSingleton.Game.GamePlugins;                    

                    string ModListFile = Path.Combine(Instance.InstallDir, "MODS", "profiles", Instance.Name, "modlist.txt");

                    var Counter = 0;

                    foreach (var Element in InstallList)
                    {
                        Lines.Add("+" + Element.MoDirectoryName);

                        ServiceSingleton.Dashboard.Progress(System.Convert.ToInt16(Math.Round(((double)++Counter / InstallList.Count * 100))));
                    }

                    Lines.Add("# This file was automatically generated by Mod Organizer.");

                    Lines.Reverse();

                    System.IO.File.WriteAllLines(ModListFile, Lines.ToArray());
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            });

            await Tsk;
        }
        public async Task ApplyLoadOrder()
        {
            TaskCompletionSource<object> Tcs = new TaskCompletionSource<object>();

            ServiceSingleton.Dashboard.Status("Applying load order...");

            var Tsk = Task.Run(() =>
            {
                try
                {
                    INolvusInstance Instance = ServiceSingleton.Instances.WorkingInstance;
                    var Package = ServiceSingleton.Packages;

                    var LoadOrderFile = Path.Combine(Instance.InstallDir, "MODS", "profiles", Instance.Name, "loadorder.txt");
                    var PluginsFile = Path.Combine(Instance.InstallDir, "MODS", "profiles", Instance.Name, "plugins.txt");

                    var LoadOrderLines = new List<string>();

                    LoadOrderLines.Add("# This file was automatically generated by Mod Organizer.");
                    LoadOrderLines.AddRange(ServiceSingleton.Game.GamePluginFiles);                    

                    var PluginsLines = new List<string>();

                    PluginsLines.Add("# This file was automatically generated by Mod Organizer.");

                    var Counter = 0;                    
                    
                    var OptionalEsps = Package.OptionalEsps;

                    foreach (string Esp in Package.LoadOrder)
                    {
                        if (OptionalEsps.Where(x => x == Esp).FirstOrDefault() == null)
                        {
                            LoadOrderLines.Add(Esp);
                            PluginsLines.Add("*" + Esp);
                        }

                        ServiceSingleton.Dashboard.Progress(System.Convert.ToInt16(Math.Round(((double)++Counter / Package.LoadOrder.Count * 100))));
                    }

                    System.IO.File.WriteAllLines(LoadOrderFile, LoadOrderLines.ToArray());
                    System.IO.File.WriteAllLines(PluginsFile, PluginsLines.ToArray());
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            });

            await Tsk;
        }
        protected override async Task OnLoadedAsync()
        {
            try
            {
                INolvusInstance Instance = ServiceSingleton.Instances.WorkingInstance;

                ServiceSingleton.Dashboard.ClearInfo();
                ServiceSingleton.Dashboard.Info("Applying install and load order");                

                ServiceSingleton.Logger.Log("Applying load order");

                if (Instance.Status.InstallStatus == InstanceInstallStatus.Updating)
                {
                    ServiceSingleton.Logger.Log("Updating detected, package will be reloaded");
                    await ServiceSingleton.Packages.Load(await ApiManager.Service.Installer.GetPackage(Instance.Id, ServiceSingleton.Packages.LoadedVersion), (s, p) =>
                    {
                        ServiceSingleton.Dashboard.Status(string.Format("{0} ({1}%)", s, p));
                        ServiceSingleton.Dashboard.Progress(p);
                    });
                }

                ServiceSingleton.Logger.Log("Applying install order");
                await ApplyInstallOrder();

                ServiceSingleton.Logger.Log("Applying load order");
                await ApplyLoadOrder();

                ServiceSingleton.Dashboard.NoStatus();
                ServiceSingleton.Dashboard.ProgressCompleted();
                ServiceSingleton.Instances.FinalizeInstance();

                ServiceSingleton.Logger.Log("Instance Finalized");

                if (!Parameters.IsEmpty && Parameters["Mode"].ToString() == "Install")
                {
                    ServiceSingleton.Dashboard.LoadFrame<FinishFrame>();
                }
                else
                {
                    ServiceSingleton.Dashboard.LoadFrame<InstancesFrame>();
                }
            }
            catch(Exception ex)
            {
                ServiceSingleton.Logger.Log(string.Format("Error during mod list ordering with message {0}", ex.Message));
                await ServiceSingleton.Dashboard.Error("Error during load order setup", ex.Message, ex.StackTrace);
            }                                                           
        }                      
    }
}
